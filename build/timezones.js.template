"use strict";

function timezones_list(){
	var tz = new TimezoneDetector();
	return tz.getList();
}

function timezones_guess(){
	var tz = new TimezoneDetector();
	var opts = {};
	if (arguments.length > 0) opts.default = arguments[0];
	var ret = tz.detect(opts);
	return ret.zoneId;
}

function timezones_get_canonical(alt_tz, default_tz){
	var tz = new TimezoneDetector();
	return tz.getCanonicalTimezone(alt_tz, default_tz);
}

;(function() {

	var root = this;
	var previous_detector = root.TimezoneDetector;

	var tz = function(){

		var self = this;

		self.getList = function(){

			return _list;
		}

		self.detect = function(opts){

			var out = {
				'zoneId' : 'America/Los_Angeles',
				'method' : 'gave_up',
			};

			if (opts && opts.default){
				out.zoneId = opts.default;
				out.method = 'default';
			}


			out.intl = _try_using_api();
			var api_guess = out.intl.zoneId;

			if (api_guess){
				// is this one of our choices?
				for (var i=0; i<_list.length; i++){
					if (_list[i][1] == api_guess){
						out.zoneId = api_guess;
						out.method = 'intlapi_exact';
						return out;
					}
				}
				// does it map to a manual equivalent?
				if (_manual_alts[api_guess]){
					out.zoneId = _manual_alts[api_guess];
					out.method = 'intl_api_manual';
					return out;
				}
				// does it map to an automatic equivalent?
				if (_auto_alts[api_guess]){
					out.zoneId = _auto_alts[api_guess];
					out.method = 'intl_api_equivalent';
					return out;
				}
				// does it map to a fallback equivalent?
				if (_fallback_alts[api_guess]){
					out.zoneId = _fallback_alts[api_guess];
					out.method = 'intl_api_fallback';
					return out;
				}
			}

			// use auto-detection via probe dates
			out.probe = _try_using_probe();

			if (out.probe.zoneId){
				out.zoneId = out.probe.zoneId;
				out.method = 'date_probe';
				return out;
			}

			//console.log('no match for TZ on key '+key);

			return out;
		}

		self.getCanonicalTimezone = function(alt_tz, default_tz) {
			// check list
			for (var i=0; i<_list.length; i++) {
				if(_list[i][1] == alt_tz) return alt_tz
			}

			// check auto alts
			if(_auto_alts[alt_tz]) return _auto_alts[alt_tz];

			//check manual alts
			if(_manual_alts[alt_tz]) return _manual_alts[alt_tz];

			return default_tz;
		}

		var _try_using_api = function(){

			var out = {
				'zoneId'	: null,
				'hasIntl'	: false,
				'hasDateTime'	: false,
				'hasOptions'	: false,
			};

			try {
				if (typeof Intl === "undefined") return out;

				out.hasIntl = true;

				if (typeof Intl.DateTimeFormat === "undefined") return out;
				var format = Intl.DateTimeFormat();
				if (typeof format === "undefined") return out;

				out.hasDateTime = true;

				if (typeof format.resolvedOptions === "undefined") return out;

				out.hasOptions = true;
				out.zoneId = format.resolvedOptions().timeZone;

			}catch (e){
				return out;
			}

			return out;
		};

		var _try_using_probe = function(){

			var key_parts = [];
#DATES#

			for (var i=1; i<=key_parts.length; i++){

				var key = key_parts.slice(0,i).join(':');
				if (_map[key]){
					return {
						'zoneId'	: _map[key],
						'probeKey'	: key,
						'fullKey'	: key_parts.join(':')
					};
				}
			}

			return {
				'zoneId'	: null,
				'fullKey'	: key_parts.join(':')
			};
		}


		var _map = #MAP#;

		var _list = #LIST#;

		var _manual_alts = #ALTS-MANUAL#
		var _auto_alts = #ALTS-AUTO#;
		var _fallback_alts = #ALTS-FALLBACK#;

		#BROKEN#

		return self;
	}

	// export
	if (typeof exports !== 'undefined'){
		if (typeof module !== 'undefined' && module.exports){
			exports = module.exports = tz;
		}
		exports.TimezoneDetector = tz;
	}else if (typeof define === 'function' && define.amd){
		define(function() { return tz; })
	}else{
		root.TimezoneDetector = tz;
	}

}).call(function(){
	return this || (typeof window !== 'undefined' ? window : global);
}());
